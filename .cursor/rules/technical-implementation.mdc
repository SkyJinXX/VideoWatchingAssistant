---
description: 
globs: 
alwaysApply: true
---
# Technical Implementation Details

## Manual Subtitle Upload System

### Implementation in [popup.js](mdc:chrome-extension/src/popup.js) and [content.js](mdc:chrome-extension/src/content.js)
Provides manual subtitle upload as fallback when API fails:

```javascript
// Storage pattern for manual subtitles
const storageKey = `manual_subtitle_${videoId}`
chrome.storage.local.set({ [storageKey]: subtitleData })

// Priority system: manual > API
const manualSubtitles = await chrome.storage.local.get([`manual_subtitle_${videoId}`])
if (manualSubtitles[`manual_subtitle_${videoId}`]) {
    return manualSubtitles[`manual_subtitle_${videoId}`]
}
```

### Features
- **SRT Format Support**: Parses SRT files into transcript and timestamped arrays
- **Drag & Drop Interface**: File upload with validation in [popup.html](mdc:chrome-extension/src/popup.html)
- **Text Paste Support**: Direct textarea editing with real-time preview
- **Per-Video Storage**: Independent subtitle storage with `manual_subtitle_${videoId}` keys
- **30-Day Auto Cleanup**: Automatic cleanup of old manual subtitles
- **Input Protection**: Prevents periodic updates from clearing user input

## Encryption System for Subtitle API

### Core Algorithm (implemented in [subtitle-extractor.js](mdc:chrome-extension/src/utils/subtitle-extractor.js))
The subtitle extraction uses AES-256-CBC encryption to communicate with downsub.com API:

```javascript
// Key generation: SHA-256 hash of password + salt
const key = CryptoJS.SHA256(password + salt)

// Encryption: AES-256-CBC with random IV
const encrypted = CryptoJS.AES.encrypt(payload, key, {
    iv: iv,
    padding: CryptoJS.pad.Pkcs7,
    mode: CryptoJS.mode.CBC
})

// Result format: Base64 JSON with ct, iv, s fields
{
    "ct": "encrypted_content_base64",
    "iv": "initialization_vector_hex",
    "s": "salt_hex"
}
```

### API Communication Pattern
1. Generate encrypted video ID using `_encode()` method
2. Make GET request to `https://get-info.downsub.com/{encrypted_id}`
3. Use specific headers including `origin: https://member.downsub.com`
4. Parse response to get subtitle URLs and metadata

## Voice Activity Detection (VAD) System

### Implementation in [voice-recorder.js](mdc:chrome-extension/src/utils/voice-recorder.js)
Uses @ricky0123/vad-web with ONNX Runtime for neural network-based speech detection:

```javascript
// VAD Configuration
const vadOptions = {
    positiveSpeechThreshold: 0.5,    // Speech detection sensitivity
    negativeSpeechThreshold: 0.35,   // Silence detection sensitivity
    minSpeechFrames: 3,              // Minimum frames for speech
    redemptionFrames: 8,             // Prevent false negatives
    submitUserSpeechOnPause: false   // Don't auto-submit on pause
}
```

### Audio Processing Pipeline
1. **Microphone Access**: Request user media with audio constraints
2. **VAD Processing**: Real-time speech/silence detection
3. **Audio Recording**: Capture during speech periods
4. **Format Conversion**: Convert to WAV format for API compatibility
5. **Fallback Mechanism**: Switch to 5-second recording if VAD fails

## Message Passing Architecture

### Content Script ↔ Background Communication
Implemented across [content.js](mdc:chrome-extension/src/content.js) and [background.js](mdc:chrome-extension/src/background.js):

```javascript
// Content Script sending message
chrome.runtime.sendMessage({
    action: 'fetch_subtitles',
    url: apiUrl,
    headers: headerObject
}, (response) => {
    if (response.success) {
        // Handle success
    } else {
        // Handle error
    }
})

// Background Script handling
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'fetch_subtitles') {
        fetchSubtitles(request.url, request.headers, sendResponse)
        return true // Keep message channel open for async response
    }
})
```

### Supported Message Types
- `fetch_subtitles`: CORS proxy for subtitle API
- `download_subtitle_content`: Download subtitle files
- `transcribe_audio`: Audio transcription (future feature)
- `chat_with_openai`: AI conversation
- `subtitles_ready`: Store subtitle data
- `upload_manual_subtitle`: Handle manual subtitle upload
- `clear_manual_subtitle`: Clear manual subtitle data

## OpenAI Integration & Cache Optimization

### Optimized Message Structure (in [openai-client.js](mdc:chrome-extension/src/utils/openai-client.js))
Restructured for OpenAI prefix caching to reduce costs by 30-50%:

```javascript
// Static system message (cacheable)
const staticSystemMessage = {
    role: 'system',
    content: `You are a helpful YouTube video assistant...
    Video Title: ${videoTitle}
    Video ID: ${videoId}
    Full Transcript: ${transcript}`
}

// Dynamic context messages (per conversation turn)
const dynamicContextMessage = {
    role: 'system', 
    content: `Current time: ${currentTime}s
    Current context: "${relevantSubtitles}"`
}

// Message array: [static, dynamic1, user1, assistant1, dynamic2, user2, ...]
```

### Context Management Strategy
- **Static Content**: Video metadata and full transcript (enables caching)
- **Dynamic Content**: Current time and relevant subtitles (inserted before each user message)
- **Spoiler Prevention**: Only shows subtitles before current timestamp
- **Temperature Setting**: Increased to 1.0 for more creative responses

### Dual Recording Strategy
1. **Primary**: VAD-based smart recording (`processVoiceQuerySmart`)
2. **Fallback**: Traditional 5-second recording (`processVoiceQuery`)
3. **Error Handling**: Graceful degradation with user notification

## Data Storage Patterns

### Chrome Storage API Usage
```javascript
// Sync storage for settings (synced across devices)
chrome.storage.sync.set({ openai_api_key: apiKey })
chrome.storage.sync.get(['openai_api_key'])

// Local storage for temporary data
chrome.storage.local.set({ 
    conversation_history: [],
    [`manual_subtitle_${videoId}`]: subtitleData
})
```

### Automatic Cleanup
- Conversation history: 7-day retention
- Manual subtitles: 30-day retention
- Periodic cleanup every hour

## Security Implementation

### Content Security Policy
- No external script loading in content scripts
- All libraries loaded locally
- Strict CORS handling through background proxy

### API Key Security
- Stored in Chrome sync storage (encrypted by browser)
- Never exposed in content scripts
- Transmitted only to authorized endpoints

### Permission Management
- Minimal required permissions in manifest
- Runtime permission checks
- Graceful degradation when permissions unavailable

## Error Handling Patterns

### Layered Error Handling
1. **Try-catch blocks** at function level
2. **Promise rejection handling** for async operations
3. **User-friendly error messages** in UI
4. **Detailed logging** for debugging

### Fallback Mechanisms
- VAD failure → Traditional recording
- API subtitle failure → Manual upload option
- Network failure → Cached data
- API rate limits → User notification

## Performance Optimizations

### Lazy Loading
- VAD libraries loaded only when needed
- Subtitle processing on-demand
- Background script optimization

### Memory Management
- Automatic cleanup of large objects
- Efficient transcript storage
- Limited conversation history

### Network Optimization
- OpenAI prefix caching for cost reduction
- Request batching where possible
- Efficient header management
- Response caching for repeated requests

### UI Optimization
- Input protection: Prevents clearing user content during updates
- Reduced update frequency: Status updates every 5 seconds instead of 2
- Focus detection: Skips updates when user is actively editing

## Debug and Logging System

### Logger Implementation (in [content.js](mdc:chrome-extension/src/content.js))
Centralized logging system with configurable levels:

```javascript
const Logger = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    
    currentLevel: 1, // INFO level by default
    
    debug: (message, ...args) => {
        if (Logger.currentLevel <= Logger.DEBUG) {
            console.log(`[WatchBuddy DEBUG] ${message}`, ...args);
        }
    },
    
    info: (message, ...args) => {
        if (Logger.currentLevel <= Logger.INFO) {
            console.log(`[WatchBuddy INFO] ${message}`, ...args);
        }
    },
    
    warn: (message, ...args) => {
        if (Logger.currentLevel <= Logger.WARN) {
            console.warn(`[WatchBuddy WARN] ${message}`, ...args);
        }
    },
    
    error: (message, ...args) => {
        if (Logger.currentLevel <= Logger.ERROR) {
            console.error(`[WatchBuddy ERROR] ${message}`, ...args);
        }
    }
};
```

### Status Display System
Dynamic status updates with smart text handling:

```javascript
// Status display with dynamic sizing
function updateStatus(message, isError = false) {
    const statusElement = document.getElementById('watchbuddy-status');
    if (statusElement) {
        statusElement.textContent = message;
        statusElement.className = `watchbuddy-status ${isError ? 'error' : ''}`;
        
        // Auto-hide after delay for non-error messages
        if (!isError) {
            setTimeout(() => {
                if (statusElement.textContent === message) {
                    statusElement.style.display = 'none';
                }
            }, 3000);
        }
    }
}
```

### UI State Management
- **Input Protection**: Prevents clearing user input during periodic updates
- **Focus Detection**: Skips updates when user is actively editing
- **Dynamic Text Handling**: Automatic text wrapping and sizing for status messages
- **Error State Management**: Persistent error display until resolved

