---
description: 
globs: 
alwaysApply: true
---
# WatchBuddy Chrome Extension - Project Overview

## Project Description
This is a Chrome extension that provides AI-powered voice interaction for YouTube videos. Users can ask questions about video content through voice input and receive intelligent responses based on the video's subtitles.

## Core Features
- **Voice Activity Detection (VAD)**: Intelligent voice recording that automatically starts/stops based on speech detection
- **YouTube Subtitle Extraction**: Fetches and processes video subtitles from YouTube using encrypted API calls
- **Manual Subtitle Upload**: Fallback option for manual SRT file upload when API fails
- **AI-Powered Q&A**: Uses OpenAI API to answer questions about video content with full subtitle context
- **Text-to-Speech**: Converts AI responses to audio for hands-free interaction
- **Smart Context Management**: Provides relevant subtitle context without spoilers
- **OpenAI Cache Optimization**: Reduces token costs by 30-50% through prefix caching

## Project Structure

### Main Directory
- [README.md](mdc:README.md) - Project documentation and setup instructions
- [reference-get-subtitle.js](mdc:reference-get-subtitle.js) - Original Tampermonkey script reference
- [package.json](mdc:package.json) - Node.js dependencies and scripts
- [create-release.js](mdc:create-release.js) - Release automation script
- [prepare-release.js](mdc:prepare-release.js) - Release preparation script

### Chrome Extension Core (`chrome-extension/`)
- [manifest.json](mdc:chrome-extension/manifest.json) - Extension manifest with permissions and configuration
- [src/content.js](mdc:chrome-extension/src/content.js) - Main content script injected into YouTube pages
- [src/background.js](mdc:chrome-extension/src/background.js) - Service worker handling API requests and message passing
- [src/popup.html](mdc:chrome-extension/src/popup.html) - Extension popup interface with subtitle management
- [src/popup.js](mdc:chrome-extension/src/popup.js) - Popup logic, settings, and manual subtitle handling
- [src/styles.css](mdc:chrome-extension/src/styles.css) - UI styling for all components

### Utility Libraries (`chrome-extension/src/utils/`)
- [subtitle-extractor.js](mdc:chrome-extension/src/utils/subtitle-extractor.js) - YouTube subtitle fetching and encryption
- [voice-recorder.js](mdc:chrome-extension/src/utils/voice-recorder.js) - VAD-based smart voice recording
- [openai-client.js](mdc:chrome-extension/src/utils/openai-client.js) - OpenAI API integration with cache optimization
- [crypto-js.min.js](mdc:chrome-extension/src/utils/crypto-js.min.js) - Cryptographic functions for subtitle API
- [ort.js](mdc:chrome-extension/src/utils/ort.js) - ONNX Runtime for VAD processing (3.8MB)
- [vad-web.js](mdc:chrome-extension/src/utils/vad-web.js) - Voice Activity Detection library




### Assets
- [icons/](mdc:chrome-extension/icons) - Extension icons (16px, 48px, 128px)

## Technical Architecture

### Technologies Used
- **JavaScript ES6+**: Modern JavaScript with async/await patterns
- **Chrome Extension Manifest V3**: Latest extension architecture with service workers
- **Voice Activity Detection**: @ricky0123/vad-web library with ONNX Runtime
- **Cryptography**: CryptoJS for subtitle API encryption (AES-256-CBC)
- **OpenAI API**: GPT-4o-mini with prefix caching optimization
- **Web Speech API**: Text-to-Speech functionality

### Key Technical Components

#### 1. Subtitle System (Dual-Source)
- **Primary**: Replicates Tampermonkey script encryption for downsub.com API
- **Fallback**: Manual SRT file upload via drag-and-drop interface
- **Priority**: Manual uploads override API-retrieved subtitles
- **Storage**: Per-video storage with 30-day auto-cleanup

#### 2. Voice Activity Detection (VAD)
- Real-time speech detection using neural networks
- Configurable thresholds for speech/silence detection
- Fallback to traditional 5-second recording
- Smart audio preprocessing and format conversion

#### 3. OpenAI Integration
- **Optimized Message Structure**: Static + dynamic context separation
- **Prefix Caching**: 30-50% cost reduction through cacheable static content
- **Temperature**: Set to 1.0 for more creative responses
- **Context Management**: Full transcript + current position without spoilers

#### 4. Security and Permissions
- Local library loading for Chrome extension compliance
- Secure API key storage in Chrome sync storage
- CORS proxy through background service worker
- Proper content security policy implementation

## Development Patterns

### Message Passing Architecture
- Content script ‚Üî Background script communication
- Async message handling with Promise-based responses
- Error propagation and logging system

### Error Handling Strategy
- Comprehensive try-catch blocks
- Fallback mechanisms (VAD ‚Üí traditional recording, API ‚Üí manual upload)
- Detailed console logging for debugging
- User-friendly error messages

### Storage Management
- Chrome sync storage for settings and API keys
- Local storage for conversation history and manual subtitles
- Automatic cleanup of expired data (7-day conversations, 30-day subtitles)

## User Workflow

### Standard Operation
1. User visits YouTube video
2. Extension automatically attempts subtitle extraction
3. If successful, user can immediately use voice chat
4. AI responds with context from auto-retrieved subtitles

### Manual Subtitle Fallback
1. If auto-extraction fails, user sees "üìù Â≠óÂπïÁÆ°ÁêÜ" section in popup
2. User visits downsub.com to download SRT file
3. User uploads SRT via drag-and-drop or file selection
4. User can edit/preview subtitles in textarea
5. User saves subtitles and continues with voice chat
6. AI responds with context from manually uploaded subtitles

## Common Modification Areas

### Adding New Features
1. **Voice Commands**: Extend [voice-recorder.js](mdc:chrome-extension/src/utils/voice-recorder.js)
2. **AI Models**: Modify [openai-client.js](mdc:chrome-extension/src/utils/openai-client.js)
3. **Subtitle Sources**: Enhance [subtitle-extractor.js](mdc:chrome-extension/src/utils/subtitle-extractor.js)
4. **UI Components**: Update [popup.html](mdc:chrome-extension/src/popup.html) and [styles.css](mdc:chrome-extension/src/styles.css)

### Debugging Issues
1. **Encryption Problems**: Use [test-encryption-debug.html](mdc:chrome-extension/test-encryption-debug.html)
2. **VAD Issues**: Test with [test-vad.html](mdc:chrome-extension/test-vad.html)
3. **Subtitle Extraction**: Debug with [test-subtitle-debug.html](mdc:chrome-extension/test-subtitle-debug.html)
4. **Manual Upload**: Check [popup.js](mdc:chrome-extension/src/popup.js) file handling logic
5. **API Integration**: Check [background.js](mdc:chrome-extension/src/background.js) logs

### Configuration Points
- VAD sensitivity: `positiveSpeechThreshold`, `negativeSpeechThreshold`
- OpenAI model: Currently using `gpt-4o-mini`
- OpenAI temperature: Set to 1.0 for creative responses
- Subtitle context range: Default 4-5 sentences before current time
- Recording timeout: Fallback to 5-second recording
- Storage cleanup: 7-day conversations, 30-day manual subtitles

## Security Considerations
- All external libraries are downloaded locally for security compliance
- API keys stored securely in Chrome storage
- No external script loading in content scripts
- CORS handled through background proxy
- Manual subtitle data stored locally only

## Development Guidelines

### Code Style and Patterns
- Use modern JavaScript ES6+ features (async/await, arrow functions, destructuring)
- Implement proper error handling with try-catch blocks
- Use the centralized Logger system for consistent logging
- Follow Chrome Extension Manifest V3 patterns
- Maintain separation of concerns between content scripts and background scripts

### UI/UX Principles
- Provide clear user feedback through status messages
- Implement graceful fallbacks for failed operations
- Protect user input from being cleared during updates
- Use consistent styling across all components
- Ensure accessibility and responsive design

### Performance Considerations
- Lazy load heavy libraries (VAD, ONNX Runtime) only when needed
- Implement efficient caching strategies for API responses
- Use Chrome storage APIs appropriately (sync vs local)
- Clean up resources and event listeners properly
- Optimize message passing between scripts

